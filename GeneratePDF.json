{"files":[{"id":"a4faed73-919d-46be-b346-c2b586adc699","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Jakarta\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"4e799116-fa3b-4caf-86db-e0c3eeadcdf9","name":"GeneratePDF","type":"server_js","source":"\nfunction updatePieChartTitle(data) {\n  var sheetId \u003d \u00271sgYBjw9gueX72_VVyIyhzGIZf1o0jnSLPriIKlue6Ww\u0027; // Google Sheets ID\n  var sheet \u003d SpreadsheetApp.openById(sheetId).getSheetByName(\u0027Pie\u0027); // Modify \u0027Pie\u0027 if necessary\n\n\n  var charts \u003d sheet.getCharts();\n  \n \n  if (charts.length \u003e 0) {\n    \n    var chart \u003d charts[0];\n    \n    \n    var newTitle \u003d \u0027Premium Breakdown for \u0027 + data[\u0027Insurer\u0027] + \u0027 - \u0027 + data[\u0027Plan\u0027];\n    \n    \n    var chartBuilder \u003d chart.modify()\n      .setOption(\u0027title\u0027, newTitle);\n\n    \n    sheet.updateChart(chartBuilder.build());\n  } else {\n    Logger.log(\u0027No charts found on the sheet.\u0027);\n  }\n}\n\n\nfunction replaceTextInSheet(data) {\n  var sheetId \u003d \u00271sgYBjw9gueX72_VVyIyhzGIZf1o0jnSLPriIKlue6Ww\u0027; // Google Sheets ID\n  var sheet \u003d SpreadsheetApp.openById(sheetId).getSheetByName(\u0027Pie\u0027); // Modify \u0027Pie\u0027 if necessary\n\n  \n  var cells \u003d {\n    \u0027B2\u0027: data[\u0027PlanPremium\u0027],  // Update PlanPremium in cell B2\n    \u0027B3\u0027: data[\u0027Rider1\u0027],       // Update Rider1 in cell B3\n    \u0027B4\u0027: data[\u0027Rider2\u0027]        // Update Rider2 in cell B4\n  };\n\n  for (var cell in cells) {\n    sheet.getRange(cell).setValue(cells[cell]);\n  }\n\n  // Retrieve values from the cells and perform calculations\n  var planPremium \u003d parseFloat(sheet.getRange(\u0027B2\u0027).getValue()) || 0;\n  var rider1Premium \u003d parseFloat(sheet.getRange(\u0027B3\u0027).getValue()) || 0;\n  var rider2Premium \u003d parseFloat(sheet.getRange(\u0027B4\u0027).getValue()) || 0;\n\n  var totalPremium \u003d planPremium + rider1Premium + rider2Premium;\n\n  // Update the pie chart title after replacing text\n  updatePieChartTitle(data);\n\n  return {\n    totalPremium: totalPremium,\n    ridersPremium: rider1Premium + rider2Premium\n  };\n}\n\n\nfunction replaceTextInDocument(data, calculatedValues) {\n  var templateId \u003d \u00271dE7XhhbPB1dHlbuwwCpIPtHatKSfs4UC1LeE5QDOZjU\u0027; // Google Docs template ID\n\n  \n  var docCopy \u003d DriveApp.getFileById(templateId).makeCopy();\n  var docId \u003d docCopy.getId();\n  Logger.log(\u0027Document copied with ID: \u0027 + docId); // Log the copied document ID\n  var doc \u003d DocumentApp.openById(docId);\n  var body \u003d doc.getBody();\n\n  \n  var msPremium \u003d parseFloat(data[\u0027MSLPremium\u0027]) || 0;\n  var planPremium \u003d parseFloat(data[\u0027PlanPremium\u0027]) || 0;\n  var additionalWithdrawalLimit \u003d parseFloat(data[\u0027AdditionalWithdrawalLimit\u0027]) || 0;\n  var cashOutlay \u003d parseFloat(data[\u0027CashOutlay\u0027]) || 0;\n  var totalCashOutlay \u003d msPremium + planPremium + additionalWithdrawalLimit + cashOutlay + calculatedValues.totalPremium;\n\n  \n  body.replaceText(\u0027{{Name}}\u0027, data[\u0027Name\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Age}}\u0027, data[\u0027Age\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Insurer}}\u0027, data[\u0027Insurer\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Plan}}\u0027, data[\u0027Plan\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Rider}}\u0027, data[\u0027Rider\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{MSLPremium}}\u0027, data[\u0027MSLPremium\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{PlanPremium}}\u0027, data[\u0027PlanPremium\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{AdditionalWithdrawalLimit}}\u0027, data[\u0027AdditionalWithdrawalLimit\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{CashOutlay}}\u0027, data[\u0027CashOutlay\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{RidersPremium}}\u0027, calculatedValues.ridersPremium || \u0027\u0027);\n  body.replaceText(\u0027{{TotalPremium}}\u0027, calculatedValues.totalPremium || \u0027\u0027); \n  body.replaceText(\u0027{{TotalCashOutlay}}\u0027, totalCashOutlay || \u0027\u0027);\n\n  doc.saveAndClose();\n\n  \n  var pdf \u003d DriveApp.getFileById(docId).getAs(\u0027application/pdf\u0027);\n  var name \u003d data[\u0027Name\u0027] || \u0027default\u0027; // Use the Name field for the filename\n  var pdfFile \u003d DriveApp.createFile(pdf).setName(name + \u0027.pdf\u0027);\n  Logger.log(\u0027PDF created with ID: \u0027 + pdfFile.getId()); // Log the created PDF ID\n\n\n  \n  DriveApp.getFileById(docId).setTrashed(true);\n\n  \n  pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);\n\n\n  return \u0027https://drive.google.com/file/d/\u0027 + pdfFile.getId() + \u0027/preview\u0027;\n}\n\n\n\nfunction replaceTextAndCreatePdf(data) {\n \n  var calculatedValues \u003d replaceTextInSheet(data);\n\n  \n  var pdfUrl \u003d replaceTextInDocument(data, calculatedValues); // This now returns the URL\n\n  return pdfUrl;\n}\n\n\n\nfunction doGet(e) {\n  var data \u003d {\n    \u0027Name\u0027: \u0027Wahyu Hidayat\u0027,\n    \u0027Age\u0027: \u002730\u0027,\n    \u0027Insurer\u0027: \u0027Wayz Insurance\u0027,\n    \u0027Plan\u0027: \u0027Basic Plan\u0027,\n    \u0027Rider\u0027: \u0027Extra Coverage\u0027,\n    \u0027MSLPremium\u0027: \u0027100\u0027,\n    \u0027PlanPremium\u0027: \u0027200\u0027,\n    \u0027AdditionalWithdrawalLimit\u0027: \u002750\u0027,\n    \u0027CashOutlay\u0027: \u0027150\u0027,\n    \u0027Rider1\u0027: \u0027250.98\u0027, // Update Rider1 value\n    \u0027Rider2\u0027: \u0027100.00\u0027, // Update Rider2 value\n    // \u0027TotalPremium\u0027: \u0027225\u0027, // Placeholder, will be updated based on calculation\n    // \u0027TotalCashOutlay\u0027: \u0027175\u0027\n  };\n\n  var callback \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.callback) ? e.parameter.callback : null;\n\n  try {\n    var pdfId \u003d replaceTextAndCreatePdf(data);\n    var result \u003d JSON.stringify({ pdfId: pdfId });\n\n    if (callback) {\n      result \u003d callback + \u0027(\u0027 + result + \u0027)\u0027;\n    }\n\n    var response \u003d ContentService.createTextOutput(result);\n    response.setMimeType(ContentService.MimeType.JAVASCRIPT);\n\n    return response;\n  } catch (error) {\n    Logger.log(\u0027Error: \u0027 + error.message); // Log the error message\n    var result \u003d JSON.stringify({ error: error.message });\n\n    if (callback) {\n      result \u003d callback + \u0027(\u0027 + result + \u0027)\u0027;\n    }\n\n    var response \u003d ContentService.createTextOutput(result);\n    response.setMimeType(ContentService.MimeType.JAVASCRIPT);\n\n    return response;\n  }\n}\n"},{"id":"43ce7b3e-4729-44a2-a274-c0d19063dcd7","name":"ConvertToWord","type":"server_js","source":"\nfunction replaceTextInSheet(data) {\n  var sheetId \u003d \u00271sgYBjw9gueX72_VVyIyhzGIZf1o0jnSLPriIKlue6Ww\u0027; // Google Sheets ID\n  var sheet \u003d SpreadsheetApp.openById(sheetId).getSheetByName(\u0027Pie\u0027);\n\n  // Retrieve values from the cells and perform calculations\n  var planPremium \u003d parseFloat(sheet.getRange(\u0027B2\u0027).getValue()) || 0;\n  var rider1Premium \u003d parseFloat(sheet.getRange(\u0027B3\u0027).getValue()) || 0;\n  var rider2Premium \u003d parseFloat(sheet.getRange(\u0027B4\u0027).getValue()) || 0;\n\n  var totalPremium \u003d planPremium + rider1Premium + rider2Premium;\n  Logger.log(\u0027totalPremium: \u0027 + totalPremium);\n\n  return {\n    totalPremium: totalPremium,\n    ridersPremium: rider1Premium + rider2Premium\n  };\n}\n\nfunction replaceTextInDocumentAndSaveAsWord(data, calculatedValues) {\n  var templateId \u003d \u00271dE7XhhbPB1dHlbuwwCpIPtHatKSfs4UC1LeE5QDOZjU\u0027; // Google Docs template ID\n\n  // Make a copy of the Google Docs template\n  var docCopy \u003d DriveApp.getFileById(templateId).makeCopy();\n  var docId \u003d docCopy.getId();\n  Logger.log(\u0027Document copied with ID: \u0027 + docId); // Log the copied document ID\n  var doc \u003d DocumentApp.openById(docId);\n  var body \u003d doc.getBody();\n\n  var msPremium \u003d parseFloat(data[\u0027MSLPremium\u0027]) || 0;\n  var planPremium \u003d parseFloat(data[\u0027PlanPremium\u0027]) || 0;\n  var additionalWithdrawalLimit \u003d parseFloat(data[\u0027AdditionalWithdrawalLimit\u0027]) || 0;\n  var cashOutlay \u003d parseFloat(data[\u0027CashOutlay\u0027]) || 0;\n  var totalCashOutlay \u003d msPremium + planPremium + additionalWithdrawalLimit + cashOutlay + calculatedValues.totalPremium;\n\n  Logger.log(\u0027totalCashOutlay: \u0027 + totalCashOutlay);\n\n  body.replaceText(\u0027{{Name}}\u0027, data[\u0027Name\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Age}}\u0027, data[\u0027Age\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Insurer}}\u0027, data[\u0027Insurer\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Plan}}\u0027, data[\u0027Plan\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{Rider}}\u0027, data[\u0027Rider\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{MSLPremium}}\u0027, data[\u0027MSLPremium\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{PlanPremium}}\u0027, data[\u0027PlanPremium\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{AdditionalWithdrawalLimit}}\u0027, data[\u0027AdditionalWithdrawalLimit\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{CashOutlay}}\u0027, data[\u0027CashOutlay\u0027] || \u0027\u0027);\n  body.replaceText(\u0027{{RidersPremium}}\u0027, calculatedValues.ridersPremium || \u0027\u0027);\n  body.replaceText(\u0027{{TotalPremium}}\u0027, calculatedValues.totalPremium || \u0027\u0027); \n  body.replaceText(\u0027{{TotalCashOutlay}}\u0027, totalCashOutlay || \u0027\u0027);\n\n  doc.saveAndClose();\n\n  // Convert the Google Docs file to DOCX format using Drive API\n  var wordUrl \u003d convertGoogleDocToWord(docId);\n  \n  Logger.log(\u0027Word document created with URL: \u0027 + wordUrl);\n\n  // Trash the copied Google Docs template\n  DriveApp.getFileById(docId).setTrashed(true);\n\n  // Return the URL of the created Word document\n  return wordUrl;\n}\n\n\n\nfunction convertGoogleDocToWord(docId) {\n  var url \u003d \u0027https://www.googleapis.com/drive/v3/files/\u0027 + docId + \u0027/export?mimeType\u003dapplication/vnd.openxmlformats-officedocument.wordprocessingml.document\u0027;\n  \n  var options \u003d {\n    method: \u0027GET\u0027,\n    headers: {\n      Authorization: \u0027Bearer \u0027 + ScriptApp.getOAuthToken()\n    }\n  };\n  \n  try {\n    var response \u003d UrlFetchApp.fetch(url, options);\n    var blob \u003d response.getBlob();\n    \n    // Create a new file in Google Drive with the DOCX content\n    var name \u003d \u0027Converted_Document.docx\u0027;\n    var file \u003d DriveApp.createFile(blob).setName(name);\n    \n    // Set sharing permissions\n    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);\n    \n    return file.getDownloadUrl(); // Use getDownloadUrl() to get the direct download link\n  } catch (error) {\n    Logger.log(\u0027Error during conversion: \u0027 + error.message);\n    throw new Error(\u0027Error during conversion: \u0027 + error.message);\n  }\n}\n\nfunction doGet(e) {\n  var data \u003d {\n    \u0027Name\u0027: \u0027Wahyu Hidayat\u0027,\n    \u0027Age\u0027: \u002730\u0027,\n    \u0027Insurer\u0027: \u0027Wayz Insurance\u0027,\n    \u0027Plan\u0027: \u0027Basic Plan\u0027,\n    \u0027Rider\u0027: \u0027Extra Coverage\u0027,\n    \u0027MSLPremium\u0027: \u0027100\u0027,\n    \u0027PlanPremium\u0027: \u0027200\u0027,\n    \u0027AdditionalWithdrawalLimit\u0027: \u002750\u0027,\n    \u0027CashOutlay\u0027: \u0027150\u0027,\n    \u0027Rider1\u0027: \u0027250.98\u0027,\n    \u0027Rider2\u0027: \u0027100.00\u0027,\n  };\n\n  var callback \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.callback) ? e.parameter.callback : null;\n\n  try {\n    var calculatedValues \u003d replaceTextInSheet(data); // Ensure this function is correctly implemented\n    var wordUrl \u003d replaceTextInDocumentAndSaveAsWord(data, calculatedValues); // Get Word URL\n    var result \u003d JSON.stringify({ wordUrl: wordUrl });\n\n    if (callback) {\n      result \u003d callback + \u0027(\u0027 + result + \u0027)\u0027;\n    }\n\n    var response \u003d ContentService.createTextOutput(result);\n    response.setMimeType(ContentService.MimeType.JAVASCRIPT);\n\n    return response;\n  } catch (error) {\n    Logger.log(\u0027Error: \u0027 + error.message); // Log the error message\n    var result \u003d JSON.stringify({ error: error.message });\n\n    if (callback) {\n      result \u003d callback + \u0027(\u0027 + result + \u0027)\u0027;\n    }\n\n    var response \u003d ContentService.createTextOutput(result);\n    response.setMimeType(ContentService.MimeType.JAVASCRIPT);\n\n    return response;\n  }\n}\n"}]}
